# js-project-weather-app

(--------Requirements --------)

- Your project should use TypeScript
- You should fetch data from the API using fetch()
- The app should have: city name, current temperature, weather description, 4-day forecast
- The presentation of the data should be in the specified format. However, you can choose how to display the forecast 
- perhaps you want to show the min and max temperature for each day, or perhaps you want to show the temperature from the middle of the day, or the   humidity, what it feels like and so on. Just make sure to make it all fit nicely with your chosen design.
- Make your app responsive (it should look good on devices from 320px width up to at least 1600px)
- Follow one of the designs as closely as you can
- Follow the guidelines on how to write clean code


 (------- Setup -------)

Sections:

Condition + temperature 
Location

Symbol (glasses/umbrella/cloud)

Message showing depending on weather

Forecast 

+
background changing depending on weather


(------- Links -------)

https://wpt-a-tst.smhi.se/backend-startpage/geo/autocomplete/places/$%7Bcity%7D?pmponly=true


https://opendata-download-metfcst.smhi.se/api/category/snow1g/version/1/geotype/point/lon/18.062639/lat/59.329468/data.json?timeseries=24

https://opendata.smhi.se/

https://opendata.smhi.se/metobs/codes




(-------- Example from session -------)

const now = new Date()
console.log(now.getYear())


const month = now.getMonth()
console.log(month)

if (month === 2) {
  console.log ("it's october");
  document.body.style.backgroundColor = "orange";
} else {
  document.body.style.backgroundColor = "pink";
}

(------ Various things to add --------)

  "createdTime": "2025-10-15T09:29:06Z",
  "referenceTime": "2025-10-15T09:15:00Z",
  "geometry": {
    "type": "Point",
    "coordinates": [18.077207, 59.33036]
  },
  "timeSeries": [
    {
      "time": "2025-10-15T10:00:00Z",
      "intervalParametersStartTime": "2025-10-15T09:00:00Z",
      "data": {
        "air_temperature": 11.9,
        "wind_from_direction": 273,
        "wind_speed": 2.6,
        "wind_speed_of_gust": 5.3,
        "relative_humidity": 75,
        "air_pressure_at_mean_sea_level": 1018,
        "visibility_in_air": 21.5,
        "thunderstorm_probability": 0,
        "probability_of_frozen_precipitation": 0,
        "cloud_area_fraction": 4,
        "low_type_cloud_area_fraction": 2,
        "medium_type_cloud_area_fraction": 0,
        "high_type_cloud_area_fraction": 0,
        "cloud_base_altitude": 9999,
        "cloud_top_altitude": 9999,
        "precipitation_amount_mean": 0,
        "precipitation_amount_min": 0,
        "precipitation_amount_max": 0,
        "precipitation_amount_median": 0,
        "probability_of_precipitation": 0,
        "precipitation_frozen_part": -9,
        "predominant_precipitation_type_at_surface": 0,
        "symbol_code": 3
      }
    }]




(-------- Styling -------)

font: Montserrat

sunny
yellow background: #F7E9B9;
color: #2A5510;

raining
#BDE8FA
#164A68;

cloudy
#FFFFFF
background: #F47775;


(-------- Search input ------)

const searchInput = document.getElementById("searchInput");

searchInput.addEventListener("input", async (e) => {
  const searchTerm = e.target.value.trim().toLowerCase();

  if (searchTerm === "") {
    if (useAPI) {
      await fetchRecipes(); // h√§mta alla fr√•n API igen
    } else {
      renderRecipes(localRecipes);
    }
    return;
  }

  if (useAPI) {
    try {
      const url = `https://api.spoonacular.com/recipes/complexSearch?query=${encodeURIComponent(
        searchTerm
      )}&number=10&addRecipeInformation=true&apiKey=${API_KEY}`;

      container.innerHTML = "<p>Searching...</p>";
      const res = await fetch(url);
      const data = await res.json();

      if (!data.results || data.results.length === 0) {
        container.innerHTML = `<p>No API results for "${searchTerm}".</p>`;
        return;
      }

      
function changeDesign(symbol) {
    const body = document.body;
    const icon = document.getElementById("weather-icon");

    // Default style settings
    body.style.transition = "background-color 0.5s ease, color 0.5s ease";

    if (symbol === 1) { // sunny
        body.style.backgroundColor = "lightyellow";
        body.style.color = "black";
        icon.src = "icons/sunny.png";
    }
    else if (symbol === 3 || symbol === 4) { // cloudy
        body.style.backgroundColor = "lightgray";
        body.style.color = "red";
        icon.src = "icons/cloudy.png";
    }
    else if (symbol === 5 || symbol === 6 || symbol === 9) { // rainy
        body.style.backgroundColor = "lightblue";
        body.style.color = "navy";
        icon.src = "icons/rainy.png";
    }
    else if (symbol === 15) { // snowy
        body.style.backgroundColor = "white";
        body.style.color = "black";
        icon.src = "icons/snowy.png";
    }
    else { // default
        body.style.backgroundColor = "beige";
        body.style.color = "black";
        icon.src = "icons/default.png";
    }
}


-----------------------------------------------------------------
From GEMINI

//----------------------------------------------------------
// SHOW WEATHER ‚Äì temp, icon, condition, and message
//----------------------------------------------------------
function showCurrentWeather(
  temp: number,
  symbol: number,
  condition: string // <-- Added to pass in the weather description
): void {
  // Get elements from the DOM
  const tempElement = document.getElementById("temperature");
  const conditionElement = document.getElementById("condition");
  const iconElement = document.getElementById("icon") as HTMLImageElement | null;
  const messageElement = document.getElementById("message");

  // Check if all elements exist before proceeding
  if (tempElement && iconElement && messageElement && conditionElement) {
    // 1. Set the temperature and condition text in their correct elements
    tempElement.textContent = `${Math.round(temp)}¬∞C`;
    conditionElement.textContent = condition;

    // 2. Define variables for the message and icon source
    let message: string;
    let iconSrc: string;

    // 3. Determine the correct message and icon based on the weather symbol
    if (symbol === 1) {
      message = "IT‚ÄôS SUNNY, DON'T FORGET YOUR SUNNIES! ‚òÄÔ∏è";
      iconSrc = "path/to/your/sunny-icon.svg"; // <-- Add your icon path
    } else if (symbol === 3 || symbol === 4) {
      message = "IT‚ÄôS CLOUDY ‚òÅÔ∏è";
      iconSrc = "path/to/your/cloudy-icon.svg"; // <-- Add your icon path
    } else if ([5, 6, 9].includes(symbol)) {
      message = "IT‚ÄôS RAINY, DON'T FORGET YOUR UMBRELLA üåßÔ∏è";
      iconSrc = "path/to/your/rainy-icon.svg"; // <-- Add your icon path
    } else if (symbol === 15) {
      message = "IT‚ÄôS SNOWING ‚ùÑÔ∏è";
      iconSrc = "path/to/your/snow-icon.svg"; // <-- Add your icon path
    } else {
      message = "WEATHER UNKNOWN ü§î";
      iconSrc = "path/to/your/unknown-icon.svg"; // <-- Add your icon path
    }

    // 4. Update the message text and icon image source
    messageElement.textContent = message;
    iconElement.src = iconSrc;
  }
}



function for condition:
function getCondition(symbol: number): string {
  const conditions: Record<number, string> = {
    1: "Clear sky",
    2: "Nearly clear sky",
    3: "Variable cloudiness",
    4: "Halfclear sky",
    5: "Cloudy",
    6: "Overcast",
    7: "Fog",
    8: "Light rain showers",
    9: "Moderate rain showers",
    10: "Heavy rain showers",
    11: "Thunderstorm",
    12: "Light sleet showers",
    13: "Moderate sleet showers",
    14: "Heavy sleet showers",
    15: "Light snow showers",
    16: "Moderate snow showers",
    17: "Heavy snow showers",
    18: "Light rain",
    19: "Moderate rain",
    20: "Heavy rain",
    21: "Thunder",
    22: "Light sleet",
    23: "Moderate sleet",
    24: "Heavy sleet",
    25: "Light snowfall",
    26: "Moderate snowfall",
    27: "Heavy snowfall",
  };
  return conditions[symbol] || "Unknown";
}

    const currentTemp = tempParam.values[0];
    const weatherSymbol = symbolParam.values[0];
    const condition = getCondition(weatherSymbol);
-------------------------------------------------------

const paragraphElement = document.getElementById('my-paragraph');
const outputDiv = document.getElementById('output');

// CORRECT: Use .textContent to get the text inside the element.
outputDiv.textContent = 'The text is: ' + paragraphElement.textContent;

// The result in the browser will be:
// "The text is: This is some important text."