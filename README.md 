# js-project-weather-app

(--------Requirements --------)

- Your project should use TypeScript
- You should fetch data from the API using fetch()
- The app should have: city name, current temperature, weather description, 4-day forecast
- The presentation of the data should be in the specified format. However, you can choose how to display the forecast 
- perhaps you want to show the min and max temperature for each day, or perhaps you want to show the temperature from the middle of the day, or the   humidity, what it feels like and so on. Just make sure to make it all fit nicely with your chosen design.
- Make your app responsive (it should look good on devices from 320px width up to at least 1600px)
- Follow one of the designs as closely as you can
- Follow the guidelines on how to write clean code


 (------- Layout of the app -------)

Sections:

Condition + temperature 
Location

Symbol (glasses/umbrella/cloud)

Message showing depending on weather

Forecast 

Search bar- Stockholm, Umeå, Malmö, Göteborg, Köpenhamn

+
background changing depending on weather


(------- Links -------)

https://wpt-a-tst.smhi.se/backend-startpage/geo/autocomplete/places/$%7Bcity%7D?pmponly=true
https://wpt-a-tst.smhi.se/backend-startpage/geo/autocomplete/places/[query]?pmponly=true
https://opendata-download-metfcst.smhi.se/api/category/snow1g/version/1/geotype/point/lon/18.062639/lat/59.329468/data.json?timeseries=24

https://opendata.smhi.se/

https://opendata.smhi.se/metobs/codes




(-------- Example from session with jennie to use -------)

const now = new Date()
console.log(now.getYear())


const month = now.getMonth()
console.log(month)

if (month === 2) {
  console.log ("it's october");
  document.body.style.backgroundColor = "orange";
} else {
  document.body.style.backgroundColor = "pink";
}


(-------- Styling -------)

font: Montserrat

sunny
background: #F7E9B9;
color: #2A5510;

raining
#BDE8FA
#164A68;

cloudy
#FFFFFF
#F47775;


(-------- Example search input from last project ------)

const searchInput = document.getElementById("searchInput");

searchInput.addEventListener("input", async (e) => {
  const searchTerm = e.target.value.trim().toLowerCase();

  if (searchTerm === "") {
    if (useAPI) {
      await fetchRecipes(); // hämta alla från API igen
    } else {
      renderRecipes(localRecipes);
    }
    return;
  }}

  if (useAPI) {
    try {
      const url = `https://api.spoonacular.com/recipes/complexSearch?query=${encodeURIComponent(
        searchTerm
      )}&number=10&addRecipeInformation=true&apiKey=${API_KEY}`;

      container.innerHTML = "<p>Searching...</p>";
      const res = await fetch(url);
      const data = await res.json();

      if (!data.results || data.results.length === 0) {
        container.innerHTML = `<p>No API results for "${searchTerm}".</p>`;
        return;
      } } } 


(-------- Weather symbols  ------)
      
    1: "Clear sky",
    2: "Nearly clear sky",
    3: "Variable cloudiness",
    4: "Halfclear sky",
    5: "Cloudy",
    6: "Overcast",
    7: "Fog",
    8: "Light rain showers",
    9: "Moderate rain showers",
    10: "Heavy rain showers",
    11: "Thunderstorm",
    12: "Light sleet showers",
    13: "Moderate sleet showers",
    14: "Heavy sleet showers",
    15: "Light snow showers",
    16: "Moderate snow showers",
    17: "Heavy snow showers",
    18: "Light rain",
    19: "Moderate rain",
    20: "Heavy rain",
    21: "Thunder",
    22: "Light sleet",
    23: "Moderate sleet",
    24: "Heavy sleet",
    25: "Light snowfall",
    26: "Moderate snowfall",
    27: "Heavy snowfall",
-------------------------------------------------------


----------------------------------------------------------------------
****** GEO Location conversion from hard coded to geo location ******
----------------------------------------------------------------------
DEFAULT COORDINATES – Stockholm 
const DEFAULT_LAT = 59.3293; 
const DEFAULT_LON = 18.0686; 
const DEFAULT_CITY = "stockholm";


TS code
You can swap those hard-coded defaults for a “best available” location resolver: 
try the browser’s Geolocation API first, fall back to IP-based location, and finally 
use your Stockholm defaults if all else fails. Here’s a drop-in TypeScript utility 
plus a quick example of wiring it to your SMHI fetch.

// location.ts
type AppLocation = {
  lat: number;
  lon: number;
  city?: string;
  source: "geolocation" | "ip" | "fallback";
};

// --- Public: get the best available location ---
export async function getAppLocation(): Promise<AppLocation> {
  // 1) Browser geolocation (requires HTTPS or localhost)
  try {
    const coords = await getBrowserCoords({ timeout: 8000, maximumAge: 5 * 60_000 });
    const city = await reverseGeocode(coords.lat, coords.lon).catch(() => undefined);
    return { ...coords, city, source: "geolocation" };
  } catch { /* ignore and fall through */ }

  // 2) IP-based fallback (approximate city-level)
  try {
    const ip = await ipLookup();
    return { ...ip, source: "ip" };
  } catch { /* ignore and fall through */ }

  // 3) Final fallback – your previous defaults
  return { lat: 59.3293, lon: 18.0686, city: "Stockholm", source: "fallback" };


// --- Helpers ---
function getBrowserCoords(options: PositionOptions): Promise<{ lat: number; lon: number }> {
  if (!("geolocation" in navigator)) return Promise.reject(new Error("Geolocation not supported"));
  // Must be called after a user gesture on iOS/Safari
  return new Promise((resolve, reject) => {
    navigator.geolocation.getCurrentPosition(
      pos => resolve({ lat: pos.coords.latitude, lon: pos.coords.longitude }),
      err => reject(err),
      options
    );
  });
}

async function reverseGeocode(lat: number, lon: number): Promise<string | undefined> {
  // OpenStreetMap Nominatim (respect usage policy; consider adding your own server/app id)
  const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${lat}&lon=${lon}`;
  const res = await fetch(url, { headers: { "Accept": "application/json" } });
  if (!res.ok) return undefined;
  const data = await res.json();
  // Try city/town/village fields in order
  return data?.address?.city || data?.address?.town || data?.address?.village || data?.address?.municipality;
}

async function ipLookup(): Promise<{ lat: number; lon: number; city?: string }> {
  // Several free services exist; here’s ipapi.co as an example
  const res = await fetch("https://ipapi.co/json/");
  if (!res.ok) throw new Error("IP lookup failed");
  const data = await res.json();
  return { lat: data.latitude, lon: data.longitude, city: data.city };
}

------------------------------------
Use it with your SMHI request
------------------------------------

import { getAppLocation } from "./location";

async function fetchWeather() {
  const { lat, lon, city, source } = await getAppLocation();

  const weatherURL =
    `https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/${lon}/lat/${lat}/data.json`;

  const res = await fetch(weatherURL);
  if (!res.ok) throw new Error(`SMHI error ${res.status}`);
  const data = await res.json();

  // update your UI
  document.querySelector(".location")!.textContent = city ?? "Your location";
  document.querySelector(".location")!.setAttribute("data-source", source);
  return data;
}
